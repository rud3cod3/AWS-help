# AWS Encryption Notes

## Symmetric vs Asymmetric Encryption

| Feature           | Symmetric Encryption                                                                | Asymmetric Encryption                                                           |
|------------------|-------------------------------------------------------------------------------------|--------------------------------------------------------------------------------|
| Keys Used         | Single key for both encryption and decryption.                                      | Pair of keys: Public key (encryption) and Private key (decryption).            |
| Speed             | Faster due to simpler algorithms.                                                   | Slower due to complex mathematical operations.                                  |
| Security          | Less secure — if the secret key is intercepted, the system is compromised.         | More secure — private key is kept secret; public key can be shared safely.     |
| Key Distribution  | Challenging; requires secure channel to share secret key.                           | Easier; public key can be openly shared.                                       |
| Best Use Cases    | Encrypting large amounts of data (files, databases).                                | Secure key exchange, digital signatures, authentication.                        |
| Examples          | AES, DES, Blowfish.                                                                 | RSA, ECC, DSA.                                                                  |
| Efficiency        | Suitable for bulk data encryption.                                                  | Often used with symmetric encryption (e.g., SSL/TLS) to exchange keys securely.|

---

## Server-side Encryption (SSE)
- Encryption handled by the server.
- AWS manages keys (SSE-S3, SSE-KMS) or allows client-provided keys (SSE-C).
- Easy to set up and manage, especially SSE-S3 and SSE-KMS.
- Slight performance overhead due to server-side encryption/decryption.
- Provides **encryption at rest** for data stored in S3.
- Helps meet compliance requirements.

---

## Client-side Encryption (CSE)
- Encryption performed on the client side; you manage your own key.
- Requires additional libraries or tools (AWS Encryption SDK, OpenSSL, GnuPG/GPG).
- Impacts client-side performance for larger data.
- Stronger security: data is encrypted both in transit and at rest.
- Greater flexibility for compliance and regulatory requirements.
- Ideal for **maximum control and custom encryption needs**.

---

## Server-Side Encryption (SSE) Types

### 1. SSE with S3-Managed Keys (SSE-S3)
- S3 automatically encrypts/decrypts data using AWS-managed keys (AES-256).
- Can be set as **default encryption** for a bucket or overridden for specific objects.
- **No extra charges**; cost included in S3 storage.

**Limitations:**
- No custom key management.
- No detailed audit or key visibility.
- Limited compatibility with advanced features or third-party tools.

---

### 2. SSE with AWS Key Management Service (SSE-KMS)
- KMS allows creating and controlling encryption keys.
- Supported in S3, RDS, EBS, EFS.
- Two options:
  1. AWS-managed keys
  2. Customer-managed keys

| Feature                  | SSE-S3                    | SSE-KMS (AWS-managed keys)               | SSE-KMS (Customer-managed keys)          |
|--------------------------|---------------------------|----------------------------------------|-----------------------------------------|
| Key Management           | Fully AWS managed         | AWS managed with some visibility        | Fully customer managed                   |
| Key Control              | No direct control         | Limited (enable/disable, view key ID)  | Full control (rotation, policies)       |
| Key Visibility           | None                      | Limited (key ID)                        | Full metadata and usage via CloudTrail  |
| Auditing                 | Basic (S3 server logs)    | Detailed (CloudTrail)                   | Detailed (CloudTrail)                    |
| Key Rotation             | Automatic, invisible      | Automatic, trackable                    | Automatic or manual, fully customizable |
| Granular Permissions     | Limited (bucket policies) | Granular via KMS/IAM policies           | Full control via KMS/IAM policies       |
| Compliance               | May not meet strict needs | Better for compliance                    | Best for compliance and auditability    |
| Cost                     | Included                  | Extra KMS request charges               | Extra KMS request and storage charges   |
| Use Cases                | Simple encryption needs   | Balance of control and ease             | Sensitive data, strict compliance needs |

**Price Components:**
- Key creation & storage  
- Automatic key rotation  
- Key usage  
- Cross-region data transfer  
- CloudTrail logging

---

### 3. Dual-layer SSE with KMS
- Two layers of encryption before storing data.
- **Layer 1:** SSE-S3 (automatic encryption)  
- **Layer 2:** SSE-KMS (customer-controlled keys)  
- **Why needed:** Compliance with FIPS and NSA CNSSP 15 guidelines.

---

### 4. SSE with Customer-Provided Keys (SSE-C)
- AWS CLI only.
- You provide and manage encryption keys; AWS does not store them.
- **Encryption workflow:**
  - **Upload:** provide key; S3 encrypts using that key.
  - **Download:** provide same key; S3 decrypts before sending data.

**Steps to use SSE-C:**
1. Create a 256-bit AES key:  
   
   openssl rand 32 > sse-c.key
   
2. Base64 encode key and compute MD5 hash:  
   
   key=$(cat sse-c.key | base64)
   keymd5=$(cat sse-c.key | openssl dgst -md5 -binary | base64)
   
3. Configure AWS CLI:  
   
   aws configure
   
4. **Upload file using SSE-C:**  
   
   aws s3api put-object \
     --bucket <bucket-name> \
     --key <object-key> \
     --body myfile \
     --sse-customer-algorithm AES256 \
     --sse-customer-key $key \
     --sse-customer-key-md5 $keymd5
   
5. **Download file using SSE-C:**  
   
   aws s3api get-object \
     --bucket <bucket-name> \
     --key <object-key> \
     myfile \
     --sse-customer-algorithm AES256 \
     --sse-customer-key $key \
     --sse-customer-key-md5 $keymd5
   

**Note:**
- Replace `<bucket-name>` and `<object-key>` with your S3 bucket and object names.  
- The key must be **256-bit** (AES-256) and kept safe; loss of key means data cannot be decrypted.

