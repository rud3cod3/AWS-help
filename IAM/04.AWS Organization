-------------------
* AWS Organizations
-------------------
- Can be usefull for to manage multiple accounts centrally
- Designed to simplify account management,billing and compliance enforcement across an organization's AWS account.
- No addtional charges

--------------------
* Why it is needed ?
--------------------

1. Keep things safe 
   - like if one part has a problem, the others are safe.

2. Watch spending   
   - helps to analyze spending by departments who spent more and help in budgeting

3. Regulatory compliance 
   - different account can follow differnet rules if needed, usefull for companies that work in more than one country or industry

4. Control and Rules
   - Let companies set different accounts, making it easier to manage who can do what

5. Work without mixing up
   - keeps different project like seprate so they don't get mixed up or cause problems for each other.

6. Disaster Recovery And Grow easily
   - if something goes wrong having backups in a seprate account can help fix things faster without risking everything else
   - as comapany grows, it can add more accounts to keep everything organized and running smoothly

7. Stay organized
   - helps to keep everything tidy

8. Make things just right
   - each account can be setup exactly how it is needed for a specific job, project or team

9. Try new ideas safely
   - Gives a safe space to try out new things wihout messing up the main work or loosing important data


------------------
***  Use Case  ***
------------------
- Cental Management
- Automated Account Creation
- Organizational Unit
- Service control Policies (SCP)
- Consolidate Billing 


--------------------------
* Service control policies 
--------------------------
- Control what you can or cannot do in AWS Accounts
- When we assign permission to any user we use IAM and to control this policy assigned by IAM we use SCP.
- Exclusivity to AWS Organizations:
(1) Exclusively available to Organization accounts only
(2) Part of service control feature	


* Points

- Offers layered Architecture
- SCP can be applied to different levels root level, organizational unit and individual accounts
- Scope of the application, action must be allowed by iam policies and not explicitly denied by spcs to procees.
- Deny as default, primary function is to deny or restrict

* Default SCP
- Allows unrestricted access to all the aws services
- It is always working with deny

* Example :

#Script

{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Deny",
      "Action": "ec2:*",
      "Resource": "*",
      "Condition": {
        "StringNotEquals": {
          "aws:RequestedRegion": "us-west-2"
        }
      }
    }
  ]
}


#How this works:

Deny = This takes priority over any IAM permissions.
Action: ec2:* = Applies to all EC2 actions (launch, terminate, etc.).
Condition = If the region is not us-west-2, the action is denied.

#Result in practice:

Dev user IAM policy: "Allow EC2:*"
SCP: "Deny EC2 outside us-west-2"
- Dev user tries to launch in us-east-1 →  Denied
- Dev user launches in us-west-2 →  Works 
